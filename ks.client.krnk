# Client Script runs only on the client
# KrunkScript Copyright (C) Yendis Entertainment Pty Ltd
# 
# Add custom actions here

# Minimal example that can only handle strings. 

str TX_ID = "KS_TX";
str RX_ID = "KS_RX";

action send_js_message(str msg) {
    GAME.UI.updateDIVText(TX_ID, "KS_flush");
    GAME.UI.updateDIVText(TX_ID, msg);
}

action on_js_message(str msg) {
    ######################################
    # do whatever u want with msg string #
    ######################################
	GAME.log("Message received: " + msg);
}

public action start() {
    GAME.UI.addDIV(TX_ID, false);
    GAME.UI.addDIV(RX_ID, false);
}

public action onDIVClicked(str id) {
    if (id == RX_ID) {
        on_js_message(GAME.UI.getDIVText(RX_ID));
    }
}

# Runs every game tick
public action update(num delta) {

}

# Add rendering logic in here
public action render(num delta) {

}

# Player spawns in
public action onPlayerSpawn(str id) {

}

# Player died
public action onPlayerDeath(str id, str killerID) {

}

# Player update
public action onPlayerUpdate(str id, num delta, obj inputs) {

}

# User pressed a key
public action onKeyPress(str key, num code) {

}

# User released a key
public action onKeyUp(str key, num code) {

}

# User held a key
public action onKeyHeld(str key, num code) {

}

# User pressed a button on a controller
public action onControllerPress(str key, num code) {

}

# User released a button on a controller
public action onControllerUp(str key, num code) {

}

# User held a button on a controller
public action onControllerHeld(str key, num code) {

}

# User clicked on screen
public action onMouseClick(num button, num x, num y) {

}

# User released clicked on screen
public action onMouseUp(num button, num x, num y) {

}

# User scrolled on screen
public action onMouseScroll(num dir) {

}

# Client receives network message
public action onNetworkMessage(str id, obj data) {

}